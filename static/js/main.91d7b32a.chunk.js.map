{"version":3,"sources":["ai/move.tsx","ai/game.tsx","ai/computer.tsx","store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Move","initialRow","initialCol","startRow","startCol","endRow","endCol","listCaptureRow","listCaptureCol","listVisitedRow","listVisitedCol","capturedSquares","Set","state","newMove","move","slice","forEach","element","add","line","push","Game","board","currentPlayer","timeLimit","russianRules","this","i","j","Array","fill","map","slideMoves","jumpMoves","getJumps","length","getSlides","moves","pieceType","kingMoves","dir","y","x","offset_y","directions","offset_x","offset","len","dir_y","dir_x","numMoves","cantMove","kingMove","fill_1","captureRow","captureCol","anyValidMoves","whichAreValid","has","fill_2","movesList","console","debug","game","newGame","Computer","maximizingPlayer","heuristicType","maxDepth","startTime","currentTime","outOfTime","numAllyPieces","numAllyKings","numOppPieces","numOppKings","date","Date","getTime","getBoardStatus","bestMoveVal","depthReached","bestMove","listBestMovesCurrentDepth","legalMovesList","getLegalMoves","log","bestVal","Number","NEGATIVE_INFINITY","copy","GameStatic","applyMove","min","minVal","MAX_VALUE","Math","floor","random","depth","easyHeuristic","mediumHeuristic","hardHeuristic","numRows","numCols","boardVal","cntAllyPieces","cntAllyKings","cntOppPieces","cntOppKings","numDefendingNeighbors","backBonus","middleBonus","originalPlayer","player1Moves","player2Moves","MIN_VALUE","alpha","beta","newDate","listLegalMoves","cutoffTest","evalFcn","v","copyGame","max","maxVal","row","col","defense","abs","initialState","actionsToSend","character","respectfulAppeal","backwardDirection","players","isRobot","playerTurn","hasArrowSelectedItem","arrowSelectedItemRow","arrowSelectedItemCol","isContiniousMoving","continiousMoving","continiousCaptured","hasSelectedItem","selectedItemRow","selectedItemCol","gameBoard","pieces","tiles","checkers","EmptyGameStatic","setCurrentState","doMove","newBoard","checker","processCellPress","legalMoves","foundedMove","newState","reducer","action","type","character_id","column","computerPlayer","alphaBetaSearch","printMove","restMoves","Error","dictionary","label_coords","label_coords_backwards","App","memo","useReducer","appState","dispatch","assistantStateRef","useRef","assistantRef","downHandler","e","key","preventDefault","upHandler","handleTileClick","_renderPieces","playerId","values","keys","values_sorted","countPieces","checkersType","divStyle","top","left","backgroundImage","myClassName","className","id","toString","style","onClick","handlePieceClick","idx","sort","a","b","useEffect","getState","current","process","createAssistant","on","navigation","insets","command","close","window","addEventListener","removeEventListener","setTimeout","href","background","onKeyDown","countTiles","color","_renderTiles","_renderPult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91d7b32a.chunk.js","sourcesContent":["\r\nclass Move{\r\n    public initialRow=0;\r\n    public initialCol=0;\r\n\r\n    public startRow=0;\r\n    public startCol=0;\r\n\r\n    public endRow=0;\r\n    public endCol=0;\r\n\r\n    public listCaptureRow: number[]=[];\r\n    public listCaptureCol: number[]=[];\r\n\r\n    public listVisitedRow: number[]=[];\r\n    public listVisitedCol: number[]=[];\r\n\r\n    //public Set<Pair> capturedSquares;\r\n    public capturedSquares = new Set();\r\n    public state: number[][]=[];\r\n\r\n    constructor()\r\n    {\r\n\r\n    }\r\n\r\n    static fill_1(startRow: number, startCol: number, endRow: number, endCol: number, state: number[][]) {\r\n        let newMove=new Move();\r\n        newMove.startRow = startRow;\r\n        newMove.startCol = startCol;\r\n        newMove.endRow = endRow;\r\n        newMove.endCol = endCol;\r\n        newMove.state = state;\r\n        newMove.listCaptureRow = [];\r\n        newMove.listCaptureCol = [];\r\n        newMove.listVisitedRow = [];\r\n        newMove.listVisitedCol = [];\r\n        newMove.capturedSquares = new Set();\r\n        return newMove;\r\n    }\r\n\r\n    // copy constructor\r\n    static fill_2(move: Move) {\r\n        let newMove=new Move();\r\n        newMove.initialRow = move.initialRow;\r\n        newMove.initialCol = move.initialCol;\r\n        newMove.startRow = move.startRow;\r\n        newMove.startCol = move.startCol;\r\n        newMove.endRow = move.endRow;\r\n        newMove.endCol = move.endCol;\r\n        newMove.listVisitedRow = move.listVisitedRow.slice();\r\n        newMove.listVisitedCol = move.listVisitedCol.slice();\r\n        newMove.listCaptureRow = move.listCaptureRow.slice();\r\n        newMove.listCaptureCol = move.listCaptureCol.slice();\r\n        newMove.capturedSquares = new Set();\r\n        move.capturedSquares.forEach(element => {\r\n            newMove.capturedSquares.add(element);\r\n        });\r\n        //\r\n        newMove.state=[];\r\n        move.state.forEach(line => {\r\n            newMove.state.push(line.slice());\r\n        });\r\n        return newMove;\r\n    }\r\n\r\n}\r\n\r\nexport default Move;","\r\nimport Move from \"./move\";\r\n\r\nclass Game {\r\n    // 8x8 board composed of integers from -1 to 4.\r\n    // -1 invalid board space, 0 empty board space\r\n    // 1 -> player 1 normal pieces, 2 -> player 2 normal pieces, 3 -> player 1 kings, 4 -> player 2 kings\r\n    board: number[][]=[];\r\n\r\n    static directions=[{y:1, x:1},{y:-1,x:1},{y:1,x:-1},{y:-1,x:-1}];\r\n\r\n    // set default starting player and time limit\r\n    currentPlayer = 1;\r\n    timeLimit = 3;\r\n\r\n    // При запуске расчета кодов сюда запишется нужное значение (менять в store.ts)\r\n    russianRules = false;\r\n    // board colors\r\n    //public const ANSI_RED = \"\\u001B[91m\";\r\n    //public const ANSI_WHITE_BACKGROUND = \"\\u001B[47m\";\r\n    //public const ANSI_CYAN = \"\\u001B[96m\";\r\n    //public const ANSI_RESET = \"\\u001B[0m\";\r\n    // empty constructor\r\n    //constructor() {\r\n    //}\r\n\r\n    public static EmptyGameStatic()\r\n    {\r\n        let newGame=new Game();\r\n        return newGame;\r\n    }\r\n\r\n    // copy constructor, used for when AI needs to apply minimax algorithm\r\n    public static GameStatic(game: Game) {\r\n        let newGame=new Game();\r\n        newGame.board = [];\r\n        for (let i = 0; i < game.board.length; i++) {\r\n            newGame.board.push(game.board[i].slice());\r\n        }\r\n        newGame.currentPlayer = game.currentPlayer;\r\n        newGame.timeLimit = game.timeLimit;\r\n        return newGame;\r\n    }\r\n\r\n    public setCurrentState(board: number[][], currentPlayer: number, timeLimit: number): void {\r\n        this.currentPlayer = currentPlayer;\r\n        this.timeLimit = timeLimit;\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (board[i][j]>=0)\r\n                    this.board[i][j] = board[i][j]%10;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // initialize board as new game board\r\n    newGame(): void {\r\n        // прервое число - количество строк, второе - колонок\r\n        this.board = new Array(8).fill(0).map(() => new Array(8).fill(0));\r\n        // initialize the board with null spaces as -1, empty spaces as 0, player 1\r\n        // as 1 (red checkers) and player 2 as 2 (blue checkers)\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 8; j += 2) {\r\n                if ((i & 1) === 1) {\r\n                    this.board[i][j + 1] = -1;\r\n                    this.board[i][j] = 1;\r\n                } else {\r\n                    this.board[i][j] = -1;\r\n                    this.board[i][j + 1] = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 3; i < 5; i++) {\r\n            for (let j = 0; j < 8; j += 2) {\r\n                if ((i & 1) === 1) {\r\n                    this.board[i][j + 1] = -1;\r\n                    this.board[i][j] = 0;\r\n                } else {\r\n                    this.board[i][j] = -1;\r\n                    this.board[i][j + 1] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 5; i < 8; i++) {\r\n            for (let j = 0; j < 8; j += 2) {\r\n                if ((i & 1) === 1) {\r\n                    this.board[i][j + 1] = -1;\r\n                    this.board[i][j] = 2;\r\n                } else {\r\n                    this.board[i][j] = -1;\r\n                    this.board[i][j + 1] = 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    // load games into board[][] and fill other variables using .txt files following Sable's board format\r\n    loadGameBoard(filename: string): boolean {\r\n        try {\r\n            //BufferedReader reader = new BufferedReader(new FileReader(filename));\r\n            this.board = new Array(8).fill(0).map(() => new Array(8).fill(0));\r\n            for (let i = 0; i < 8; i++) {\r\n                String[] boardValues = reader.readLine().trim().split(\"\\\\s+\");\r\n                if ((i & 1) == 0) {\r\n                    for (int j = 0; j < 8; j += 2) {\r\n                        board[i][j] = -1;\r\n                        board[i][j + 1] = Integer.valueOf(boardValues[j / 2]);\r\n                    }\r\n                } else {\r\n                    for (int j = 0; j < 8; j += 2) {\r\n                        board[i][j] = Integer.valueOf(boardValues[j / 2]);\r\n                        board[i][j + 1] = -1;\r\n                    }\r\n                }\r\n            }\r\n            String currPlayer = reader.readLine();\r\n            currentPlayer = Integer.valueOf(currPlayer);\r\n            String cpuTimeLimit = reader.readLine();\r\n            timeLimit = Integer.valueOf(cpuTimeLimit);\r\n            return true;\r\n        } catch (FileNotFoundException e) {\r\n            //e.printStackTrace();\r\n            System.out.println(\"File not found.\");\r\n            return false;\r\n        } catch (IOException e) {\r\n            //e.printStackTrace();\r\n            System.out.println(\"IO exception occurred.\");\r\n            return false;\r\n        }\r\n    }\r\n    // print board corresponding to board[][]\r\n    void printBoard() {\r\n        System.out.println(\"      0      1      2      3      4      5      6      7   \");\r\n        for (int i = 0; i < 8; i++) {\r\n            System.out.print(\"   \");\r\n            if ((i & 1) == 0) { // print even rows\r\n                // padding with extra row of black/white space\r\n                for (int j = 0; j < 4; j++) {\r\n                    System.out.print(ANSI_WHITE_BACKGROUND + \"       \" + ANSI_RESET + \"       \");\r\n                }\r\n\r\n                System.out.println(\"\");\r\n                System.out.print(\" \" + (i) + \" \");\r\n\r\n                for (int j = 0; j < 8; j++) {\r\n                    printCorrectPiece(board[i][j]);\r\n                }\r\n\r\n                System.out.println(\"\");\r\n                System.out.print(\"   \");\r\n\r\n                // padding with extra row of black/white space\r\n                for (int j = 0; j < 4; j++) {\r\n                    System.out.print(ANSI_WHITE_BACKGROUND + \"       \" + ANSI_RESET + \"       \");\r\n                }\r\n\r\n            } else { //print odd rows\r\n                // padding with extra row of black/white space\r\n                for (int j = 0; j < 4; j++) {\r\n                    System.out.print(\"       \" + ANSI_WHITE_BACKGROUND + \"       \" + ANSI_RESET);\r\n                }\r\n\r\n                System.out.println(\"\");\r\n                System.out.print(\" \" + (i) + \" \");\r\n\r\n                for (int j = 0; j < 8; j++) {\r\n                    printCorrectPiece(board[i][j]);\r\n                }\r\n\r\n                System.out.println(\"\");\r\n                System.out.print(\"   \");\r\n\r\n                // padding with extra row of black/white space\r\n                for (int j = 0; j < 4; j++) {\r\n                    System.out.print(\"       \" + ANSI_WHITE_BACKGROUND + \"       \" + ANSI_RESET);\r\n                }\r\n            }\r\n\r\n            System.out.println(\"\");\r\n        }\r\n    }\r\n    // helper function for printBoard()\r\n    void printCorrectPiece(int val) {\r\n        switch (val) {\r\n            case -1:\r\n                System.out.print(ANSI_WHITE_BACKGROUND + \"       \" + ANSI_RESET);\r\n                break;\r\n            case 0:\r\n                System.out.print(\"       \");\r\n                break;\r\n            case 1:\r\n                System.out.print(ANSI_RED + \"   -   \" + ANSI_RESET);\r\n                break;\r\n            case 2:\r\n                System.out.print(ANSI_CYAN + \"   .   \" + ANSI_RESET);\r\n                break;\r\n            case 3:\r\n                System.out.print(ANSI_RED + \"   *   \" + ANSI_RESET);\r\n                break;\r\n            case 4:\r\n                System.out.print(ANSI_CYAN + \"   0   \" + ANSI_RESET);\r\n                break;\r\n\r\n        }\r\n    }\r\n    */\r\n\r\n    // function to iterate over all pieces in the board and get legal moves for current player\r\n    getLegalMoves(state: number[][]): Move[] {\r\n        //List<Move> slideMoves = new ArrayList<Move>();\r\n        //List<Move> jumpMoves = new ArrayList<Move>();\r\n        let slideMoves: Move[]=[];\r\n        let jumpMoves: Move[]=[];\r\n\r\n        // iterate over the entire board, check for legal moves for all pieces of current player\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (this.currentPlayer === 1) {\r\n                    if (this.board[i][j] === 1 || this.board[i][j] === 3) {\r\n                        this.getJumps(jumpMoves, null, this.board[i][j], i, j, state);\r\n                        // stop looking for slide moves if we find any jump moves\r\n                        if (jumpMoves.length===0) {\r\n                            this.getSlides(slideMoves, this.board[i][j], i, j, this.board);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (this.board[i][j] === 2 || this.board[i][j] === 4) {\r\n                        this.getJumps(jumpMoves, null, this.board[i][j], i, j, state);\r\n                        // stop looking for slide moves if we find any jump moves\r\n                        if (jumpMoves.length===0) {\r\n                            this.getSlides(slideMoves, this.board[i][j], i, j, this.board);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return jumpMoves.length===0 ? slideMoves : jumpMoves;\r\n    }\r\n    // function which mutates the moves list it takes as a parameter\r\n    getSlides(moves: Move[], pieceType: number, startRow: number, startCol: number, state:number[][]): void {\r\n        //ArrayList<Integer> endRow = new ArrayList<Integer>();\r\n        //ArrayList<Integer> endCol = new ArrayList<Integer>();\r\n        let endRow: number[]=[];\r\n        let endCol: number[]=[];\r\n        let kingMoves = [];\r\n\r\n        switch (pieceType) {\r\n            case 1:\r\n                endRow.push(startRow + 1);\r\n                endRow.push(startRow + 1);\r\n                endCol.push(startCol + 1);\r\n                endCol.push(startCol - 1);\r\n                break;\r\n            case 2:\r\n                endRow.push(startRow - 1);\r\n                endRow.push(startRow - 1);\r\n                endCol.push(startCol + 1);\r\n                endCol.push(startCol - 1);\r\n                break;\r\n            case 3:\r\n            case 4:\r\n                if (this.russianRules)\r\n                {\r\n                    // Дамка ходит в любом направлении\r\n                    for (let dir=0; dir<4; dir++)\r\n                    {\r\n                        let y=startRow;\r\n                        let x=startCol;\r\n                        let offset_y=Game.directions[dir].y;\r\n                        let offset_x=Game.directions[dir].x;\r\n                        for (let offset=1; offset<=7; offset++)\r\n                        {\r\n                            y+=offset_y;\r\n                            x+=offset_x;\r\n                            // если вышли за границы\r\n                            if (y < 0 || y > 7 || x < 0 || x > 7) break;\r\n                            endRow.push(y);\r\n                            endCol.push(x);\r\n                            kingMoves.push({len: offset, dir_y: Game.directions[dir].y, dir_x: Game.directions[dir].x});\r\n                        }\r\n                    }\r\n                } else\r\n                {\r\n                    endRow.push(startRow + 1);\r\n                    endRow.push(startRow + 1);\r\n                    endRow.push(startRow - 1);\r\n                    endRow.push(startRow - 1);\r\n                    endCol.push(startCol + 1);\r\n                    endCol.push(startCol - 1);\r\n                    endCol.push(startCol + 1);\r\n                    endCol.push(startCol - 1);\r\n                    break;\r\n                }\r\n        }\r\n\r\n        let numMoves = endRow.length;\r\n\r\n        for (let i = 0; i < numMoves; i++) {\r\n            // check if inside the board\r\n            if (endRow[i] < 0 || endRow[i] > 7 || endCol[i] < 0 || endCol[i] > 7) continue;\r\n            // check if end position is occupied\r\n            if (state[endRow[i]][endCol[i]] !== 0) continue;\r\n            if ((pieceType===3||pieceType===4)&&this.russianRules)\r\n            {\r\n                let cantMove=false;\r\n                let kingMove=kingMoves[i];\r\n                // если это дамка, то надо, чтобы в промежуточных положениях никого не было\r\n                // TODO и здесь тоже цикл сделал от 1 вместо 0, а то она проверяла сама себя\r\n                for (let j=1; j<kingMoves[i].len; j++)\r\n                {\r\n                    if (state[startRow+kingMove.dir_y*j][startCol+kingMove.dir_x*j] !== 0)\r\n                    {\r\n                        cantMove=true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (cantMove)\r\n                    continue;\r\n\r\n            }\r\n            // move was legal so add it to list\r\n            moves.push(Move.fill_1(startRow, startCol, endRow[i], endCol[i], state));\r\n        }\r\n    }\r\n    // function which mutates the moves list it takes as a parameter\r\n    getJumps(moves: Move[], move: Move|null, pieceType: number, startRow: number, startCol: number, state: number[][]): void  {\r\n        // endRow/endCol list to add all possible squares to move to from each piece\r\n        // captureRow/captureCol list to add all possible squares that can be captured\r\n        let endRow: number[]=[];\r\n        let endCol: number[]=[];\r\n        let captureRow: number[]=[];\r\n        let captureCol: number[]=[];\r\n        let kingMoves = [];\r\n\r\n        if (this.russianRules)\r\n        {\r\n            switch (pieceType) {\r\n                case 1:\r\n                case 2:\r\n                    // все рубят в любом направлении\r\n                    endRow.push(startRow + 2);\r\n                    endRow.push(startRow + 2);\r\n                    endRow.push(startRow - 2);\r\n                    endRow.push(startRow - 2);\r\n                    endCol.push(startCol - 2);\r\n                    endCol.push(startCol + 2);\r\n                    endCol.push(startCol - 2);\r\n                    endCol.push(startCol + 2);\r\n                    captureRow.push(startRow + 1);\r\n                    captureRow.push(startRow + 1);\r\n                    captureRow.push(startRow - 1);\r\n                    captureRow.push(startRow - 1);\r\n                    captureCol.push(startCol - 1);\r\n                    captureCol.push(startCol + 1);\r\n                    captureCol.push(startCol - 1);\r\n                    captureCol.push(startCol + 1);\r\n                    break;\r\n                case 3:\r\n                case 4:\r\n                    // Дамка ходит (рубит) в любом направлении на любое расстояние\r\n                    for (let dir=0; dir<4; dir++)\r\n                    {\r\n                        let offset_y=Game.directions[dir].y;\r\n                        let offset_x=Game.directions[dir].x;\r\n                        // здесь рубят\r\n                        let y=startRow+offset_y;\r\n                        let x=startCol+offset_x;\r\n\r\n                        for (let offset=1; offset<=7; offset++)\r\n                        {\r\n                            // а тут останавливаются\r\n                            y+=offset_y;\r\n                            x+=offset_x;\r\n                            // если вышли за границы\r\n                            if (y < 0 || y > 7 || x < 0 || x > 7) break;\r\n                            endRow.push(y);\r\n                            endCol.push(x);\r\n                            captureRow.push(y-offset_y);\r\n                            captureCol.push(x-offset_x);\r\n                            // TODO\r\n                            kingMoves.push({len: offset, dir_y: Game.directions[dir].y, dir_x: Game.directions[dir].x});\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n\r\n        } else\r\n        {\r\n            switch (pieceType) {\r\n                case 1:\r\n                    endRow.push(startRow + 2);\r\n                    endRow.push(startRow + 2);\r\n                    endCol.push(startCol - 2);\r\n                    endCol.push(startCol + 2);\r\n                    captureRow.push(startRow + 1);\r\n                    captureRow.push(startRow + 1);\r\n                    captureCol.push(startCol - 1);\r\n                    captureCol.push(startCol + 1);\r\n                    break;\r\n                case 2:\r\n                    endRow.push(startRow - 2);\r\n                    endRow.push(startRow - 2);\r\n                    endCol.push(startCol - 2);\r\n                    endCol.push(startCol + 2);\r\n                    captureRow.push(startRow - 1);\r\n                    captureRow.push(startRow - 1);\r\n                    captureCol.push(startCol - 1);\r\n                    captureCol.push(startCol + 1);\r\n                    break;\r\n                case 3:\r\n                case 4:\r\n                    endRow.push(startRow + 2);\r\n                    endRow.push(startRow + 2);\r\n                    endRow.push(startRow - 2);\r\n                    endRow.push(startRow - 2);\r\n                    endCol.push(startCol - 2);\r\n                    endCol.push(startCol + 2);\r\n                    endCol.push(startCol - 2);\r\n                    endCol.push(startCol + 2);\r\n                    captureRow.push(startRow + 1);\r\n                    captureRow.push(startRow + 1);\r\n                    captureRow.push(startRow - 1);\r\n                    captureRow.push(startRow - 1);\r\n                    captureCol.push(startCol - 1);\r\n                    captureCol.push(startCol + 1);\r\n                    captureCol.push(startCol - 1);\r\n                    captureCol.push(startCol + 1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        let numMoves = endRow.length;\r\n        let anyValidMoves = false;\r\n        // new boolean[numMoves]\r\n        let whichAreValid = new Array(numMoves).fill(false);\r\n\r\n        for (let i = 0; i < numMoves; i++) {\r\n            // check if inside the board\r\n            if (endRow[i] < 0 || endRow[i] > 7 || endCol[i] < 0 || endCol[i] > 7) continue;\r\n            // check if end position is occupied\r\n            if (move !== null) {\r\n                // check if end position is occupied but allow piece to land on initial position\r\n                if (state[endRow[i]][endCol[i]] !== 0 && state[endRow[i]][endCol[i]] !== state[move.initialRow][move.initialCol]) continue;\r\n                // check if we're trying to capture a piece we've already captured in current move\r\n                //if (move.capturedSquares.has(new Pair(captureRow[i], captureCol[i]))) continue;\r\n                if (move.capturedSquares.has(captureRow[i]*100+captureCol[i])) continue;\r\n            }\r\n            else {\r\n                // if move is null, make sure end position isn't occupied\r\n                if (state[endRow[i]][endCol[i]] !== 0) continue;\r\n            }\r\n\r\n            if ((pieceType===3||pieceType===4)&&this.russianRules)\r\n            {\r\n                let cantMove=false;\r\n                let kingMove=kingMoves[i];\r\n                // если это дамка, то надо, чтобы в промежуточных положениях никого не было\r\n                // отличие от перемещения, тут на 1 итерацию меньше (начинается с 1)\r\n                for (let j=1; j<kingMoves[i].len; j++)\r\n                {\r\n                    if (state[startRow+kingMove.dir_y*j][startCol+kingMove.dir_x*j] !== 0)\r\n                    {\r\n                        cantMove=true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (cantMove)\r\n                    continue;\r\n            }\r\n\r\n\r\n            // check if captured positions were occupied by the opposite player\r\n            if (this.currentPlayer === 1 && !(state[captureRow[i]][captureCol[i]] === 2 || state[captureRow[i]][captureCol[i]] === 4)) continue;\r\n\r\n            if (this.currentPlayer === 2 && !(state[captureRow[i]][captureCol[i]] === 1 || state[captureRow[i]][captureCol[i]] === 3)) continue;\r\n\r\n            // if we got this far, it means the move is valid\r\n            anyValidMoves = true;\r\n            whichAreValid[i] = true;\r\n        }\r\n\r\n        if (move !== null && !anyValidMoves) {\r\n            moves.push(move);\r\n            return;\r\n        }\r\n\r\n        if (move === null && anyValidMoves) {\r\n            for (let i = 0; i < numMoves; i++) {\r\n                if (whichAreValid[i]) {\r\n                    let newMove = Move.fill_1(startRow, startCol, endRow[i], endCol[i], state);\r\n                    newMove.initialRow = startRow;\r\n                    newMove.initialCol = startCol;\r\n                    newMove.startRow = startRow;\r\n                    newMove.startCol = startCol;\r\n                    newMove.endRow = endRow[i];\r\n                    newMove.endCol = endCol[i];\r\n                    newMove.listCaptureRow.push(captureRow[i]);\r\n                    newMove.listCaptureCol.push(captureCol[i]);\r\n                    newMove.listVisitedRow.push(endRow[i]);\r\n                    newMove.listVisitedCol.push(endCol[i]);\r\n                    newMove.capturedSquares.add(captureRow[i]*100+captureCol[i]);\r\n                    this.getJumps(moves, newMove, pieceType, newMove.endRow, newMove.endCol, state);\r\n                }\r\n            }\r\n        }\r\n        if (move !== null && anyValidMoves) {\r\n            for (let i = 0; i < numMoves; i++) {\r\n                if (whichAreValid[i]) {\r\n                    let newMove = Move.fill_2(move);\r\n                    newMove.startRow = startRow;\r\n                    newMove.startCol = startCol;\r\n                    newMove.endRow = endRow[i];\r\n                    newMove.endCol = endCol[i];\r\n                    newMove.listCaptureRow.push(captureRow[i]);\r\n                    newMove.listCaptureCol.push(captureCol[i]);\r\n                    newMove.listVisitedRow.push(endRow[i]);\r\n                    newMove.listVisitedCol.push(endCol[i]);\r\n                    newMove.capturedSquares.add(captureRow[i]*100+captureCol[i]);\r\n                    this.getJumps(moves, newMove, pieceType, newMove.endRow, newMove.endCol, state);\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    // function to a apply a move to the board\r\n    applyMove(move: Move, state: number[][]): void {\r\n        // handle slide move\r\n        if (move.listCaptureRow.length===0) {\r\n            // update end position to match current piece\r\n            state[move.endRow][move.endCol] = state[move.startRow][move.startCol];\r\n            // make the piece a king if it is in the back row of the opposite team's side\r\n            if (state[move.startRow][move.startCol] === 1 && move.endRow === 7) {\r\n                state[move.endRow][move.endCol] += 2;\r\n            }\r\n            if (state[move.startRow][move.startCol] === 2 && move.endRow === 0) {\r\n                state[move.endRow][move.endCol] += 2;\r\n            }\r\n            // clear initial position\r\n            state[move.startRow][move.startCol] = 0;\r\n        }\r\n        // handle jump move\r\n        else {\r\n            // clear capture positions\r\n            for (let i = 0; i < move.listCaptureRow.length; i++) {\r\n                state[move.listCaptureRow[i]][move.listCaptureCol[i]] = 0;\r\n            }\r\n            // update end position to match current piece\r\n            state[move.endRow][move.endCol] = state[move.initialRow][move.initialCol];\r\n            // make the piece a king if it is in the back row of the opposite team's side\r\n            if (state[move.initialRow][move.initialCol] === 1 && move.endRow === 7) {\r\n                state[move.endRow][move.endCol] += 2;\r\n            }\r\n            if (state[move.initialRow][move.initialCol] === 2 && move.endRow === 0) {\r\n                state[move.endRow][move.endCol] += 2;\r\n            }\r\n            //  clear initial position\r\n            state[move.initialRow][move.initialCol] = 0;\r\n        }\r\n        // switch the currentPlayer\r\n        this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;\r\n        //System.out.println(\"Current Player: \" + currentPlayer);\r\n    }\r\n    // print moves and in the case of jumps show intermediate jumps\r\n    printListMoves(movesList: Move[]) {\r\n        if (movesList[0].listCaptureRow.length===0) {\r\n            for (let i = 0; i < movesList.length; i++) {\r\n                console.debug(\"Move \" + i + \": (\" + movesList[i].startRow + \",\" + movesList[i].startCol + \") --> (\" + movesList[i].endRow + \",\" + movesList[i].endCol + \")\");\r\n\r\n            }\r\n        } else {\r\n            for (let i = 0; i < movesList.length; i++) {\r\n                console.debug(\"\\n\");\r\n                console.debug(\"Move \" + i + \": (\" + movesList[i].initialRow + \",\" + movesList[i].initialCol + \")\");\r\n                for (let j = 0; j < movesList[i].listVisitedRow.length; j++) {\r\n                    console.debug(\" --> (\" + movesList[i].listVisitedRow[j] + \",\" + movesList[i].listVisitedCol[j] + \")\");\r\n                }\r\n            }\r\n            console.debug(\"\");\r\n        }\r\n        console.debug(\"\");\r\n    }\r\n    // print individual move\r\n    printMove(move: Move) {\r\n        if (move.listCaptureRow.length===0){\r\n            console.debug(\"Move \" + \": (\" + move.startRow + \",\" + move.startCol + \") --> (\" + move.endRow + \",\" + move.endCol + \")\");\r\n        } else {\r\n            console.debug(\"Move \" + \": (\" + move.initialRow + \",\" + move.initialCol + \")\");\r\n            for (let j = 0; j < move.listVisitedRow.length; j++) {\r\n                console.debug(\" --> (\" + move.listVisitedRow[j] + \",\" + move.listVisitedCol[j] + \")\");\r\n            }\r\n            console.debug(\"\");\r\n        }\r\n        console.debug(\"\");\r\n    }\r\n    /*\r\n    // print help note which shows what symbols represent the pieces of each player\r\n    void printNote() {\r\n        System.out.println(\"Player 1 is\" + ANSI_RED + \"  -  \" + ANSI_RESET + \"(normal piece) and\" + ANSI_RED + \"  *  \" + ANSI_RESET + \"(king)\");\r\n        System.out.println(\"Player 2 is\" + ANSI_CYAN + \"  .  \" + ANSI_RESET + \"(normal piece) and\" + ANSI_CYAN + \"  0  \" + ANSI_RESET + \"(king)\");\r\n        System.out.println(\"\");\r\n    }\r\n    */\r\n}\r\n\r\nexport default Game;\r\n","import Game from './game';\r\nimport Move from './move';\r\n\r\nclass Computer\r\n{\r\n    // maximizingPlayer specifies which player the computer is playing for.\r\n    maximizingPlayer=0;\r\n    // maxDepth used to keep track of depth reached using iterative deepening search\r\n    maxDepth=0;\r\n    // default time limit\r\n    timeLimit = 2;\r\n    // heuristicType specifies which heuristic is used for the computer\r\n    heuristicType=0;\r\n    // startTime and currentTime used to ensure search doesn't exceed time limit\r\n    startTime = 0; // long\r\n    currentTime = 0; // long\r\n    outOfTime = false;\r\n    // used to keep track of number of pieces on board prior to search\r\n    numAllyPieces = 0;\r\n    numAllyKings = 0;\r\n    numOppPieces = 0;\r\n    numOppKings = 0;\r\n\r\n    // evaluation function for mini-max.\r\n    constructor(maximizingPlayer: number, heuristicType: number) {\r\n        this.maximizingPlayer = maximizingPlayer;\r\n        this.heuristicType = heuristicType;\r\n    }\r\n\r\n    // iterative deepening mini-max search with alpha beta pruning\r\n    // Move\r\n    public alphaBetaSearch(game: Game): Move|null {\r\n        // begin by getting start time for search\r\n        let date = new Date();\r\n        this.startTime = date.getTime();\r\n        // initialize necessary variables\r\n        this.getBoardStatus(game);\r\n        this.outOfTime = false;\r\n        let bestMoveVal = 0;\r\n        let depthReached = 0;\r\n        let bestMove:Move|null = null;\r\n        let listBestMovesCurrentDepth: Move[]=[];\r\n        let legalMovesList:Move[] = game.getLegalMoves(game.board);\r\n        // just return move if only 1 move available\r\n        if (legalMovesList.length === 1) {\r\n            console.log(\"Searched to depth 0 in 0 seconds.\");\r\n            return legalMovesList[0];\r\n        }\r\n        // actual search (iterative deepening mini-max w/ alpha beta pruning).\r\n        for (this.maxDepth = 0; this.maxDepth < 15 && !this.outOfTime; this.maxDepth++) {\r\n            listBestMovesCurrentDepth = [];\r\n            let bestVal = Number.NEGATIVE_INFINITY;\r\n            for (let i=0; i<legalMovesList.length; i++)\r\n            {\r\n                let move=legalMovesList[i];\r\n                let copy = Game.GameStatic(game);\r\n                copy.applyMove(move, copy.board);\r\n                //let min = this.minVal(copy, Number.MIN_VALUE, Number.MAX_VALUE, 0);\r\n                let min = this.minVal(copy, Number.NEGATIVE_INFINITY, Number.MAX_VALUE, 0);\r\n                if (this.outOfTime) break;\r\n                // System.out.println(\"Possible move val: \" + min);\r\n                if (min === bestVal) {\r\n                    listBestMovesCurrentDepth.push(move);\r\n                }\r\n                if (min > bestVal) {\r\n                    listBestMovesCurrentDepth.length=0;\r\n                    listBestMovesCurrentDepth.push(move);\r\n                    bestVal = min;\r\n                }\r\n                if (bestVal === Number.MAX_VALUE) break;\r\n            }\r\n            if (!this.outOfTime) {\r\n                //let chosenMove = random.nextInt(listBestMovesCurrentDepth.length);\r\n                let chosenMove=Math.floor(Math.random()*listBestMovesCurrentDepth.length);\r\n                bestMove = listBestMovesCurrentDepth[chosenMove];\r\n                depthReached = this.maxDepth;\r\n                bestMoveVal = bestVal;\r\n            }\r\n            if (bestMoveVal === Number.MAX_VALUE) break;\r\n        }\r\n        // System.out.println(\"Best move value \" + bestMoveVal);\r\n        console.log(\"Searched to depth \" + depthReached + \" in \" + ((this.currentTime-this.startTime)/1000) + \" seconds.\");\r\n        return bestMove;\r\n    }\r\n    // check if we've reached leaf nodes or maximum depth\r\n    public cutoffTest(numMoves: number, depth: number) {\r\n        if (numMoves === 0 || depth === this.maxDepth){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // eval function decides the heuristic used to calculate value of leaf nodes\r\n    public evalFcn(game: Game): number {\r\n        switch (this.heuristicType) {\r\n            case 1:\r\n                return this.easyHeuristic(game);\r\n            case 2:\r\n                return this.mediumHeuristic(game);\r\n            case 3:\r\n                return this.hardHeuristic(game);\r\n            default:\r\n                return this.hardHeuristic(game);\r\n        }\r\n    }\r\n    // heuristic which takes into account: number of pieces, defending neighbors, backrow protectors, closeness to becoming king,\r\n    // and number of moves each player has for given board. also forces trades when ahead.\r\n    public hardHeuristic(game: Game): number {\r\n        let numRows = game.board.length;\r\n        let numCols = game.board[0].length;\r\n        let boardVal = 0;\r\n        let cntAllyPieces = 0;\r\n        let cntAllyKings = 0;\r\n        let cntOppPieces = 0;\r\n        let cntOppKings = 0;\r\n\r\n        for (let i = 0; i < numRows; i++) {\r\n            for (let j = 0; j < numCols; j++) {\r\n                if (this.maximizingPlayer === 1){\r\n                    switch(game.board[i][j]) {\r\n                        case 1:\r\n                            cntAllyPieces++;\r\n                            boardVal += this.numDefendingNeighbors(i, j, game.board) * 50 + this.backBonus(i) + (15 * i) + this.middleBonus(i, j);\r\n                            break;\r\n                        case 2:\r\n                            cntOppPieces++;\r\n                            boardVal -= this.numDefendingNeighbors(i, j, game.board) * 50 + this.backBonus(i) + (15 * (7 - i)) + this.middleBonus(i, j);\r\n                            break;\r\n                        case 3:\r\n                            cntAllyKings++;\r\n                            boardVal += this.middleBonus(i,j);\r\n                            break;\r\n                        case 4:\r\n                            cntOppKings++;\r\n                            boardVal -= this.middleBonus(i,j);\r\n                            break;\r\n                    }\r\n                } else {\r\n                    switch(game.board[i][j]) {\r\n                        case 1:\r\n                            cntOppPieces++;\r\n                            boardVal -= this.numDefendingNeighbors(i, j, game.board) * 50 + this.backBonus(i)  + (15 * i) + this.middleBonus(i, j);\r\n                            break;\r\n                        case 2:\r\n                            cntAllyPieces++;\r\n                            boardVal += this.numDefendingNeighbors(i, j, game.board) * 50 + this.backBonus(i) + (15 * (7 - i)) + this.middleBonus(i, j);;\r\n                            break;\r\n                        case 3:\r\n                            cntOppKings++;\r\n                            boardVal -= this.middleBonus(i, j);\r\n                            break;\r\n                        case 4:\r\n                            cntAllyKings++;\r\n                            boardVal += this.middleBonus(i, j);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // force trades when ahead\r\n        if (this.numAllyPieces + this.numAllyKings > this.numOppPieces + this.numOppKings && cntOppPieces + cntOppKings !== 0 && this.numOppPieces + this.numOppKings !== 0 && this.numOppKings !== 1) {\r\n            if ((cntAllyPieces + cntAllyKings)/(cntOppPieces + cntOppKings) > (this.numAllyPieces + this.numAllyKings)/(this.numOppPieces + this.numOppKings)) {\r\n                boardVal += 150;\r\n            } else {\r\n                boardVal -= 150;\r\n            }\r\n        }\r\n\r\n        boardVal += 600 * cntAllyPieces + 1000 * cntAllyKings - 600 * cntOppPieces - 1000 * cntOppKings;\r\n\r\n        // heavy computation to see how many moves each player has, dont do until players have under 6 pieces\r\n        if (this.numOppPieces + this.numOppKings < 6 || this.numAllyPieces + this.numAllyKings < 6) {\r\n            let originalPlayer = game.currentPlayer;\r\n            game.currentPlayer = 1;\r\n            let player1Moves: Move[] = game.getLegalMoves(game.board);\r\n            game.currentPlayer = 2;\r\n            let player2Moves: Move[] = game.getLegalMoves(game.board);\r\n            game.currentPlayer = originalPlayer;\r\n\r\n            if (player1Moves.length===0) {\r\n                return this.maximizingPlayer === 1 ? Number.NEGATIVE_INFINITY : Number.MAX_VALUE;\r\n            }\r\n\r\n            if (player2Moves.length===0) {\r\n                return this.maximizingPlayer === 2 ? Number.NEGATIVE_INFINITY : Number.MAX_VALUE;\r\n            }\r\n        }\r\n\r\n        if (cntOppPieces + cntOppKings === 0 && cntAllyPieces + cntAllyKings > 0) {\r\n            boardVal = Number.MAX_VALUE;\r\n        }\r\n\r\n        if (cntAllyPieces + cntAllyKings === 0 && cntOppPieces + cntOppKings > 0) {\r\n            boardVal -= Number.MIN_VALUE;\r\n        }\r\n\r\n        return boardVal;\r\n    }\r\n\r\n    public mediumHeuristic(game: Game): number {\r\n        let numRows = game.board.length;\r\n        let numCols = game.board[0].length;\r\n        let boardVal = 0;\r\n\r\n        for (let i = 0; i < numRows; i++) {\r\n            for (let j = 0; j < numCols; j++) {\r\n                if (this.maximizingPlayer === 1){\r\n                    switch(game.board[i][j]) {\r\n                        case 1:\r\n                            boardVal += 3 + (i * 0.5) + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal += 1;\r\n                            }\r\n                            if (i === 0) {\r\n                                boardVal += 2;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            boardVal -= 3 + ((7 - i) * 0.5) + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal -= 1;\r\n                            }\r\n                            if (i === 7) {\r\n                                boardVal -= 2;\r\n                            }\r\n                            break;\r\n                        case 3:\r\n                            boardVal += 5 + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal += 1;\r\n                            }\r\n                            if (i === 0) {\r\n                                boardVal += 2;\r\n                            }\r\n                            break;\r\n                        case 4:\r\n                            boardVal -= 5 + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal -= 1;\r\n                            }\r\n                            if (i === 7) {\r\n                                boardVal -= 2;\r\n                            }\r\n                            break;\r\n                    }\r\n                } else {\r\n                    switch(game.board[i][j]) {\r\n                        case 1:\r\n                            boardVal -= 3 + (i * 0.5) + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal -= 1;\r\n                            }\r\n                            if (i === 0) {\r\n                                boardVal -= 2;\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            boardVal += 3 + ((7 - i) * 0.5) + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal += 1;\r\n                            }\r\n                            if (i === 7) {\r\n                                boardVal += 2;\r\n                            }\r\n                            break;\r\n                        case 3:\r\n                            boardVal -= 5 + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal -= 1;\r\n                            }\r\n                            if (i === 0) {\r\n                                boardVal -= 2;\r\n                            }\r\n                            break;\r\n                        case 4:\r\n                            boardVal += 5 + this.numDefendingNeighbors(i, j, game.board);\r\n                            if (j === 0 || j === 8) {\r\n                                boardVal += 1;\r\n                            }\r\n                            if (i === 7) {\r\n                                boardVal += 2;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return boardVal;\r\n    }\r\n\r\n    public easyHeuristic(game: Game): number {\r\n        let numRows = game.board.length;\r\n        let numCols = game.board[0].length;\r\n        let boardVal = 0;\r\n\r\n        for (let i = 0; i < numRows; i++) {\r\n            for (let j = 0; j < numCols; j++) {\r\n                if (this.maximizingPlayer === 1){\r\n                    switch(game.board[i][j]) {\r\n                        case 1:\r\n                            boardVal += 3;\r\n                            break;\r\n                        case 2:\r\n                            boardVal -= 3;\r\n                            break;\r\n                        case 3:\r\n                            boardVal += 5;\r\n                            break;\r\n                        case 4:\r\n                            boardVal -= 5;\r\n                            break;\r\n                    }\r\n                } else {\r\n                    switch(game.board[i][j]) {\r\n                        case 1:\r\n                            boardVal -= 3;\r\n                            break;\r\n                        case 2:\r\n                            boardVal += 3;\r\n                            break;\r\n                        case 3:\r\n                            boardVal -= 5;\r\n                            break;\r\n                        case 4:\r\n                            boardVal += 5;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return boardVal;\r\n    }\r\n    // minimax with alpha beta pruning\r\n    public maxVal(game: Game, alpha: number, beta: number, depth: number): number {\r\n        // check if ran out of time for search\r\n        let newDate = new Date();\r\n        this.currentTime = newDate.getTime();\r\n        if ((this.currentTime - this.startTime) >= this.timeLimit * 990) {\r\n            this.outOfTime = true;\r\n            return 0;\r\n        }\r\n        // actual max algorithm\r\n        let listLegalMoves: Move[] = game.getLegalMoves(game.board);\r\n        if (this.cutoffTest(listLegalMoves.length, depth)) {\r\n            return this.evalFcn(game);\r\n        }\r\n        let v = Number.NEGATIVE_INFINITY;\r\n        listLegalMoves.forEach(move => {\r\n            let copyGame = Game.GameStatic(game);\r\n            copyGame.applyMove(move, copyGame.board);\r\n            v = Math.max(v, this.minVal(copyGame, alpha, beta, depth + 1));\r\n            if (v >= beta) return v;\r\n            alpha = Math.max(alpha, v);\r\n        });\r\n        return v;\r\n    }\r\n\r\n    public minVal(game: Game, alpha: number, beta: number, depth: number): number {\r\n        // check if ran out of time for search\r\n        let newDate = new Date();\r\n        this.currentTime = newDate.getTime();\r\n        if ((this.currentTime - this.startTime) > this.timeLimit * 990) {\r\n            this.outOfTime = true;\r\n            return 0;\r\n        }\r\n        // actual min algorithm\r\n        let listLegalMoves: Move[] = game.getLegalMoves(game.board);\r\n        if (this.cutoffTest(listLegalMoves.length, depth)) {\r\n            return this.evalFcn(game);\r\n        }\r\n        let v = Number.MAX_VALUE;\r\n        listLegalMoves.forEach(move => {\r\n            let copyGame = Game.GameStatic(game);\r\n            copyGame.applyMove(move, copyGame.board);\r\n            v = Math.min(v, this.maxVal(copyGame, alpha, beta, depth + 1));\r\n            if (v <= alpha) return v;\r\n            beta = Math.min(beta, v);\r\n        });\r\n        return v;\r\n    }\r\n    // gets number of neighbors for a piece on the board\r\n    public numDefendingNeighbors(row: number, col: number, state: number[][]): number {\r\n        let defense = 0;\r\n        switch (state[row][col]) {\r\n            case 1:\r\n                if (row + 1 < state.length && col + 1 < state[0].length) {\r\n                    if ((state[row + 1][col + 1] & 1) === 1) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row + 1 < state.length && col - 1 >= 0) {\r\n                    if ((state[row + 1][col - 1] & 1) === 1) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                break;\r\n            case 2:\r\n                if (row - 1 >= 0 && col + 1 < state[0].length) {\r\n                    if ((state[row - 1][col + 1] & 1) === 0) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row - 1 >= 0 && col - 1 >= 0) {\r\n                    if ((state[row - 1][col - 1] & 1) === 0) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                break;\r\n            case 3:\r\n                if (row + 1 < state.length && col + 1 < state[0].length) {\r\n                    if ((state[row + 1][col + 1] & 1) === 1) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row + 1 < state.length && col - 1 >= 0) {\r\n                    if ((state[row + 1][col - 1] & 1) === 1) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row - 1 >= 0 && col + 1 < state[0].length) {\r\n                    if ((state[row - 1][col + 1] & 1) === 1) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row - 1 >= 0 && col - 1 >= 0) {\r\n                    if ((state[row - 1][col - 1] & 1) === 1) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                break;\r\n            case 4:\r\n                if (row + 1 < state.length && col + 1 < state[0].length) {\r\n                    if ((state[row + 1][col + 1] & 1) === 0) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row + 1 < state.length && col - 1 >= 0) {\r\n                    if ((state[row + 1][col - 1] & 1) === 0) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row - 1 >= 0 && col + 1 < state[0].length) {\r\n                    if ((state[row - 1][col + 1] & 1) === 0) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                if (row - 1 >= 0 && col - 1 >= 0) {\r\n                    if ((state[row - 1][col - 1] & 1) === 0) {\r\n                        defense += 1;\r\n                    }\r\n                }\r\n                break;\r\n\r\n        }\r\n        return defense;\r\n    }\r\n    // returns bonus if piece is protecting its king row\r\n    public backBonus(row: number) {\r\n        if (this.maximizingPlayer === 1 && row === 0) {\r\n            return 100;\r\n        }\r\n        if (this.maximizingPlayer === 2 && row === 7) {\r\n            return 100;\r\n        }\r\n        return 0;\r\n    }\r\n    // returns bonus depending on how close piece is to the middle\r\n    public middleBonus(row: number, col: number) {\r\n        return 100 - ((Math.abs(4 - col) + Math.abs(4 - row)) * 10);\r\n    }\r\n\r\n    // get number of pieces on original board and update global variables\r\n    public getBoardStatus(game: Game) {\r\n        let numRows = game.board.length;\r\n        let numCols = game.board[0].length;\r\n        this.numAllyPieces = 0;\r\n        this.numAllyKings = 0;\r\n        this.numOppPieces = 0;\r\n        this.numOppKings = 0;\r\n\r\n        for (let i = 0; i < numRows; i++) {\r\n            for (let j = 0; j < numCols; j++) {\r\n                if (this.maximizingPlayer === 1) {\r\n                    switch (game.board[i][j]) {\r\n                        case 1:\r\n                            this.numAllyPieces++;\r\n                            break;\r\n                        case 2:\r\n                            this.numOppPieces++;\r\n                            break;\r\n                        case 3:\r\n                            this.numAllyKings++;\r\n                            break;\r\n                        case 4:\r\n                            this.numOppKings++;\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    switch (game.board[i][j]) {\r\n                        case 1:\r\n                            this.numOppPieces++;\r\n                            break;\r\n                        case 2:\r\n                            this.numAllyPieces++;\r\n                            break;\r\n                        case 3:\r\n                            this.numOppKings++;\r\n                            break;\r\n                        case 4:\r\n                            this.numAllyKings++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Computer;","\r\nimport Game from './ai/game';\r\nimport Computer from './ai/computer';\r\nimport Move from './ai/move';\r\nimport { debug } from 'node:console';\r\n\r\n\r\nexport const initialState = { \r\n  actionsToSend: [],\r\n  character: 'sber',\r\n  respectfulAppeal: true,\r\n\r\n  //The initial setup\r\n\r\n  russianRules: false,\r\n  /*\r\n  backwardDirection: true,\r\n  players: [{isRobot: true}, {isRobot: false}],\r\n  playerTurn: 2,\r\n  */\r\n\r\n  backwardDirection: false,\r\n  players: [{isRobot: false}, {isRobot: true}],\r\n  playerTurn: 1,\r\n\r\n\r\n  // с клавиатуры выбирали поле\r\n  hasArrowSelectedItem: false,\r\n  arrowSelectedItemRow: 4, arrowSelectedItemCol: 4,\r\n\r\n  // Здесь счетчик\r\n  isContiniousMoving: 0,\r\n  continiousMoving: [],\r\n  continiousCaptured: [],\r\n\r\n  // какая-то шашка выбрана. после любого хода сбрасывается\r\n  hasSelectedItem: false,\r\n  selectedItemRow: 0, selectedItemCol: 0,\r\n\r\n  // 1 -> player 1 normal pieces, 2 -> player 2 normal pieces, 3 -> player 1 kings, 4 -> player 2 kings\r\n  // Нормальное начальное состояние\r\n  gameBoard : [\r\n    [0, 11, 0, 21, 0, 31, 0, 41],\r\n    [51, 0, 61, 0, 71, 0, 81, 0],\r\n    [0, 91, 0, 101, 0, 111, 0, 121],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [132, 0, 142, 0, 152, 0, 162, 0],\r\n    [0, 172, 0, 182, 0, 192, 0, 202],\r\n    [212, 0, 222, 0, 232, 0, 242, 0]\r\n  ],\r\n  // нули для копирования\r\n  /*\r\n  gameBoard : [\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0]\r\n  ],\r\n  */\r\n\r\n\r\n  /*\r\n  gameBoard : [\r\n    [0, 0, 0, 0, 0, 0, 0, 11],\r\n    [21, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [12, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 22, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 33],\r\n    [0, 0, 0, 0, 0, 0, 0, 0]\r\n  ],\r\n  gameBoard : [\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 12, 0, 0, 0, 0, 0, 11],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 23, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0]\r\n  ],\r\n  */\r\n  /*\r\n  gameBoard : [\r\n    [0, 11, 0, 21, 0, 0, 0, 41],\r\n    [51, 0, 61, 0, 71, 0, 81, 0],\r\n    [0, 91, 0, 0, 0, 111, 0, 0],\r\n    [202, 0, 0, 0, 501, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 401, 0, 402],\r\n    [134, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 172, 0, 182, 0, 0, 0, 0],\r\n    [212, 0, 222, 0, 232, 0, 242, 0]\r\n  ],\r\n\r\n  gameBoard : [\r\n    [0, 0, 0, 0, 0, 24, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 12, 0, 0, 0, 11, 0, 21],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [32, 0, 42, 0, 0, 0, 52, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 62, 0, 0, 0, 0, 0]\r\n  ],\r\n  */\r\n\r\n\r\n  //arrays to store the instances\r\n  pieces : [],\r\n  tiles : []\r\n\r\n};\r\n\r\n\r\n\r\n\r\n/*\r\ntype Note = {\r\n  id: string;\r\n  title: string;\r\n  completed: boolean;\r\n};\r\n*/\r\n\r\ntype ActionToSend = {\r\n  id: string;\r\n  Action: { action: any };\r\n}\r\n\r\ntype State = {\r\n  //notes: Array<Note>;\r\n  actionsToSend: Array<ActionToSend>,\r\n\r\n  character: string,\r\n  respectfulAppeal: boolean,\r\n\r\n  russianRules: boolean,\r\n  backwardDirection: boolean,\r\n  players: {isRobot: boolean}[],\r\n  playerTurn: number,\r\n\r\n  hasArrowSelectedItem: boolean,\r\n  arrowSelectedItemRow: number, arrowSelectedItemCol: number,\r\n\r\n  hasSelectedItem: boolean,\r\n  selectedItemRow: number, selectedItemCol: number,\r\n\r\n  isContiniousMoving: number,\r\n  continiousMoving: {y: number, x: number}[],\r\n  continiousCaptured: {y: number, x: number}[],\r\n\r\n  gameBoard: number[][],\r\n  pieces : string[],\r\n  tiles : string[]\r\n\r\n};\r\n\r\ntype Action =\r\n  | {\r\n    type: \"init\";\r\n  }\r\n  | {\r\n    type: \"character\";\r\n    character_id: string;\r\n  }\r\n  | {\r\n    type: \"change_direction\";\r\n    data: any;\r\n  }\r\n  | {\r\n    type: \"fire123\";\r\n    data: any;\r\n  }\r\n  | {\r\n    type: \"go\";\r\n    coord: number;\r\n    }\r\n  | {\r\n    type: \"go_enemy\";\r\n    coord: number;\r\n  }\r\n  | {\r\n    type: \"tile_click\";\r\n    row: number;\r\n    column: number;\r\n  }\r\n  | {\r\n    type: \"piece_click\";\r\n    row: number;\r\n    column: number;\r\n  }\r\n  | {\r\n    type: \"arrow_down\"\r\n  }\r\n  | {\r\n    type: \"arrow_up\"\r\n  }\r\n  | {\r\n    type: \"arrow_left\"\r\n  }\r\n  | {\r\n    type: \"arrow_right\"\r\n  }\r\n  | {\r\n    type: \"arrow_ok\"\r\n  }\r\n  | {\r\n    type: \"move_robot\"; // первый ход робота (хотя можно запускать и чтобы робот сделал ход за человека его шашками)\r\n  }\r\n  | {\r\n    type: \"continue_move_by_robot\" // следующие ходы робота\r\n  };\r\n\r\n\r\nfunction getLegalMoves(state: State)\r\n{\r\n  // Есть ли эта шашка возможных ходах\r\n  let checkers = Game.EmptyGameStatic();\r\n  // Важно, чтобы -1 заполнились там, где нельзя ничего ставить\r\n  checkers.newGame();\r\n  // Текущее состояние\r\n  checkers.setCurrentState(state.gameBoard, state.playerTurn, 1);\r\n  checkers.russianRules=state.russianRules;\r\n  let legalMoves = checkers.getLegalMoves(checkers.board);\r\n  return legalMoves;\r\n}  \r\n\r\n\r\n// повторяющиеся в разных местах действия. правильность хода проверяется в другом месте (до этого)\r\n// учитывается переход хода\r\nfunction doMove(state: State, move: Move)\r\n{\r\n  let newBoard: number[][]=[];\r\n  state.gameBoard.forEach(line => {\r\n   newBoard.push(line.slice());\r\n  });\r\n\r\n  // Записываем нули туда, где были срубленные шашки\r\n  if (move.listCaptureCol.length>0)\r\n  {\r\n    // На самом деле реализуем только один шаг\r\n    let row=move.listCaptureRow[0];\r\n    let col=move.listCaptureCol[0];\r\n    newBoard[row][col] = 0;\r\n  }\r\n\r\n  if (move.listCaptureCol.length>1)\r\n  {\r\n    // Ход не переходит\r\n    let checker=newBoard[move.initialRow][move.initialCol];\r\n    newBoard[move.initialRow][move.initialCol] = 0;\r\n\r\n    if ((move.listVisitedRow[0]===7&&checker%10===1)||(move.listVisitedRow[0]===0&&checker%10===2))\r\n    {\r\n      checker+=2;\r\n    }\r\n\r\n    newBoard[move.listVisitedRow[0]][move.listVisitedCol[0]] = checker;\r\n\r\n    // \r\n    let continiousMoving=[];\r\n    let continiousCaptured=[];\r\n    for (let i=0; i<move.listVisitedRow.length; i++)\r\n    {\r\n      continiousMoving.push({y:move.listVisitedRow[i], x:move.listVisitedCol[i]});\r\n      continiousCaptured.push({y:move.listCaptureRow[i], x:move.listCaptureCol[i]});\r\n    }\r\n\r\n    // Игрок может ходить дальше только этой шашкой и только продолжать рубить\r\n    if (state.players[state.playerTurn-1])\r\n    {\r\n      return {\r\n        ...state,\r\n        gameBoard: newBoard,\r\n        isContiniousMoving: 1,\r\n        continiousMoving: continiousMoving,\r\n        continiousCaptured: continiousCaptured,\r\n        // сразу выделим эту шашку\r\n        hasSelectedItem: true,\r\n        selectedItemRow: move.listVisitedRow[0], selectedItemCol:move.listVisitedCol[0]\r\n      };\r\n  \r\n    }\r\n    \r\n    // Это робот\r\n    return {\r\n      ...state,\r\n      gameBoard: newBoard,\r\n      isContiniousMoving: 1,\r\n      continiousMoving: continiousMoving,\r\n      continiousCaptured: continiousCaptured,\r\n      // не важно, что это робот, но после хода сбрасываем выделенную шашку\r\n      hasSelectedItem: false\r\n    };\r\n  }\r\n\r\n  // Обычный ход, либо последний срубленный\r\n  let checker=newBoard[move.startRow][move.startCol];\r\n  newBoard[move.startRow][move.startCol] = 0;\r\n  if ((move.endRow===7&&checker%10===1)||(move.endRow===0&&checker%10===2))\r\n  {\r\n    checker+=2;\r\n  }\r\n  newBoard[move.endRow][move.endCol] = checker;\r\n // Ход переходит\r\n  return {\r\n    ...state,\r\n    gameBoard: newBoard,\r\n    isContiniousMoving: 0,\r\n    playerTurn: state.playerTurn===1?2:1,\r\n    hasSelectedItem: false\r\n  };\r\n}\r\n\r\nfunction processCellPress(state: State, row: number, col: number): State\r\n{\r\n\r\n  let checker=state.gameBoard[row][col];\r\n  // поле, где есть шашка\r\n  if (checker>0)\r\n  {\r\n    // если это шашка игрока\r\n    if (checker%10===state.playerTurn||checker%10===state.playerTurn+2)\r\n    {\r\n      let legalMoves=getLegalMoves(state);\r\n      if (legalMoves.length!==0)\r\n      {\r\n        let foundedMove=null;\r\n        legalMoves.forEach(move => {\r\n          if (move.listCaptureRow.length>0)\r\n          {\r\n            if (move.initialRow===row&&move.initialCol===col)\r\n            {\r\n              foundedMove=move;\r\n            }\r\n          } else\r\n          {\r\n            if (move.startRow===row&&move.startCol===col)\r\n            {\r\n              foundedMove=move;\r\n            }\r\n          }\r\n        });\r\n        if (foundedMove!==null)\r\n        {\r\n          // Выделаем шашку, которой собрался ходить игрок\r\n          return {\r\n            ...state,\r\n            //hasArrowSelectedItem: true,\r\n            hasSelectedItem: true,\r\n            selectedItemRow: row,\r\n            selectedItemCol: col\r\n          };\r\n\r\n        }\r\n      }\r\n    }\r\n  } else\r\n  if (checker===0)\r\n  {\r\n    // пустое поле, если сюда выделенная шашка ходит, то делаем ход\r\n    if (state.hasSelectedItem)\r\n    {\r\n      let legalMoves=getLegalMoves(state);\r\n      let foundedMove=null;\r\n      legalMoves.forEach(move => {\r\n        if (move.listCaptureCol.length>0)\r\n        {\r\n          // если есть срубленные, надо смотреть координаты initial \r\n          if (move.initialRow===state.selectedItemRow&&move.initialCol===state.selectedItemCol&&move.listVisitedRow[0]===row&&move.listVisitedCol[0]===col)\r\n            foundedMove=move;\r\n        } else {\r\n          if (move.startRow===state.selectedItemRow&&move.startCol===state.selectedItemCol&&move.endRow===row&&move.endCol===col)\r\n            foundedMove=move;\r\n        }\r\n    });\r\n      if (foundedMove!==null)\r\n      {\r\n        // делаем ход\r\n        let newState=doMove(state, foundedMove);\r\n        //\r\n        return {\r\n          ...newState,\r\n          //hasArrowSelectedItem: true,\r\n          // это выставляется в doMove - если ходил игрок и дальше должен рубить этой же шашкой, то выделение остается\r\n          //hasSelectedItem: false\r\n        };\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  // что-то надо все равно вернуть\r\n  return state;\r\n\r\n}\r\n\r\nexport const reducer = (state: State, action: Action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case \"character\":\r\n      return {\r\n        ...state,\r\n        character: action.character_id, respectfulAppeal: action.character_id!=='joy'\r\n      }\r\n\r\n    case \"change_direction\":\r\n      console.log(\"change_direction\");\r\n      return {\r\n        ...state\r\n      }\r\n\r\n    case \"fire123\":\r\n      console.log(\"fire123\");\r\n      return {\r\n        ...state\r\n      }\r\n\r\n    case \"go\":\r\n      return {\r\n        ...state\r\n      };\r\n\r\n    case \"go_enemy\":\r\n      return {\r\n        ...state\r\n      };\r\n\r\n\r\n    case \"tile_click\":\r\n    {\r\n      //move piece when tile is clicked\r\n      /*\r\n     let newBoard: number[][]=[];\r\n     state.gameBoard.forEach(line => {\r\n      newBoard.push(line.slice());\r\n     });\r\n\r\n     if (state.hasSelectedItem)\r\n     {\r\n       // это для теста, чтобы можно было двигать любые фигуры\r\n       let color=newBoard[state.selectedItemRow][state.selectedItemCol];\r\n      newBoard[state.selectedItemRow][state.selectedItemCol] = 0;\r\n      newBoard[action.row][action.column] = color;// state.playerTurn;\r\n     }\r\n\r\n      return {\r\n        ...state,\r\n        gameBoard: newBoard\r\n        // TODO включить переход хода\r\n        //playerTurn: state.playerTurn===1?2:1\r\n      };\r\n      */\r\n      let newState=processCellPress(state, action.row, action.column);\r\n      return newState;\r\n      /*\r\n      return {\r\n        ...newState,\r\n        hasSelectedItem: true,\r\n        selectedItemRow: action.row,\r\n        selectedItemCol: action.column\r\n      };\r\n      */\r\n    }\r\n  \r\n\r\n    case \"piece_click\":\r\n    {\r\n      //select the piece on click if it is the player's turn\r\n\r\n      let newState=processCellPress(state, action.row, action.column);\r\n      return newState;\r\n      /*\r\n      return {\r\n        ...newState,\r\n        hasSelectedItem: true,\r\n        selectedItemRow: action.row,\r\n        selectedItemCol: action.column\r\n      };\r\n      */\r\n    }\r\n\r\n    case \"arrow_down\":\r\n      return {\r\n        ...state,\r\n        hasArrowSelectedItem: true,\r\n        //arrowSelectedItemRow: !state.backwardDirection?(state.arrowSelectedItemRow>=7?7:state.arrowSelectedItemRow+1):(state.arrowSelectedItemRow>0?state.arrowSelectedItemRow-1:0)\r\n        arrowSelectedItemRow: state.arrowSelectedItemRow>=7?7:state.arrowSelectedItemRow+1\r\n      };\r\n\r\n    case \"arrow_up\":\r\n      return {\r\n        ...state,\r\n        hasArrowSelectedItem: true,\r\n        //arrowSelectedItemRow: state.backwardDirection?(state.arrowSelectedItemRow>=7?7:state.arrowSelectedItemRow+1):(state.arrowSelectedItemRow>0?state.arrowSelectedItemRow-1:0)\r\n        arrowSelectedItemRow: state.arrowSelectedItemRow>0?state.arrowSelectedItemRow-1:0\r\n      };\r\n\r\n    case \"arrow_right\":\r\n      return {\r\n        ...state,\r\n        hasArrowSelectedItem: true,\r\n        //arrowSelectedItemCol: !state.backwardDirection?(state.arrowSelectedItemCol>=7?7:state.arrowSelectedItemCol+1):(state.arrowSelectedItemCol>0?state.arrowSelectedItemCol-1:0)\r\n        arrowSelectedItemCol: state.arrowSelectedItemCol>=7?7:state.arrowSelectedItemCol+1\r\n      };\r\n\r\n\r\n    case \"arrow_left\":\r\n      return {\r\n        ...state,\r\n        hasArrowSelectedItem: true,\r\n        //arrowSelectedItemCol: state.backwardDirection?(state.arrowSelectedItemCol>=7?7:state.arrowSelectedItemCol+1):(state.arrowSelectedItemCol>0?state.arrowSelectedItemCol-1:0)\r\n        arrowSelectedItemCol: state.arrowSelectedItemCol>0?state.arrowSelectedItemCol-1:0\r\n      };\r\n\r\n    case \"arrow_ok\":\r\n    {\r\n      // если не был курсор на экране, просто включим его, без обработки\r\n      if (state.hasArrowSelectedItem)\r\n      {\r\n        return processCellPress(state, state.arrowSelectedItemRow, state.arrowSelectedItemCol)\r\n      }\r\n      return {\r\n        ...state,\r\n        hasArrowSelectedItem: true\r\n      }\r\n    }\r\n  \r\n\r\n\r\n    case \"move_robot\": // первый ход робота (хотя можно запускать и чтобы робот сделал ход за человека его шашками)\r\n    {\r\n      let checkers = Game.EmptyGameStatic();\r\n      let computerPlayer = new Computer(state.playerTurn, 1);\r\n      // Важно, чтобы -1 заполнились там, где нельзя ничего ставить\r\n      checkers.newGame();\r\n      // Текущее состояние\r\n      checkers.setCurrentState(state.gameBoard, state.playerTurn, 3);\r\n      checkers.russianRules=state.russianRules;\r\n\r\n      let legalMoves = checkers.getLegalMoves(checkers.board);\r\n      if (legalMoves.length===0) {\r\n        console.log(\"I am lost!\");\r\n          //gameOver = true;\r\n          //console.log(\"Player 2 Wins!\");\r\n          //continue;\r\n      } else {\r\n      //console.log(\"Player 1's Turn: \");\r\n      //checkers.printListMoves(legalMoves);\r\n      //if (player1IsComputer){\r\n          let move = computerPlayer.alphaBetaSearch(checkers);\r\n          if (move)\r\n          {\r\n            checkers.applyMove(move, checkers.board);\r\n            console.log(\"Player Chose: \");\r\n            checkers.printMove(move);\r\n\r\n            let newState=doMove(state, move);\r\n\r\n             return {\r\n               ...newState\r\n               //playerTurn: state.playerTurn===1?2:1\r\n             };\r\n       \r\n\r\n          }\r\n      }\r\n      //}\r\n      //checkers.printNote();\r\n      //checkers.printBoard();\r\n\r\n    \r\n\r\n      return {\r\n        ...state,\r\n        playerTurn: state.playerTurn===1?2:1\r\n      };\r\n    }\r\n\r\n    case \"continue_move_by_robot\":\r\n    {\r\n      // продолжаем только если это робот\r\n      // для человека просто ход ограничивается этой шашкой (и она при этом выделена всегда)\r\n      if (state.isContiniousMoving===0||!state.players[state.playerTurn-1].isRobot)\r\n        return state;\r\n\r\n      let newBoard: number[][]=[];\r\n      state.gameBoard.forEach(line => {\r\n       newBoard.push(line.slice());\r\n      });\r\n\r\n      // Тут будет 1,2,... потому, что нулевой ход уже сделан\r\n      let i=state.isContiniousMoving;\r\n      // Столько ходов осталось\r\n      let checker=newBoard[state.continiousMoving[i-1].y][state.continiousMoving[i-1].x];\r\n      // Откуда переместились\r\n      let restMoves=state.continiousMoving.length-state.isContiniousMoving;\r\n      newBoard[state.continiousMoving[i-1].y][state.continiousMoving[i-1].x]=0;\r\n      // Срубленные\r\n      newBoard[state.continiousCaptured[i].y][state.continiousCaptured[i].x]=0;\r\n      // Переход в дамки\r\n      if ((state.continiousMoving[i].y===7&&checker%10===1)||(state.continiousMoving[i].y===0&&checker%10===2))\r\n      {\r\n        checker+=2;\r\n      }\r\n      // Новая координата\r\n      newBoard[state.continiousMoving[i].y][state.continiousMoving[i].x] = checker;\r\n\r\n      if (restMoves>1)\r\n      {\r\n        // Ход не переходит\r\n        return {\r\n          ...state,\r\n          gameBoard: newBoard,\r\n          isContiniousMoving: state.isContiniousMoving+1\r\n        };\r\n      }\r\n    \r\n      // Обычный ход, либо последний срубленный\r\n    \r\n    \r\n      // Ход переходит\r\n      return {\r\n        ...state,\r\n        gameBoard: newBoard,\r\n        isContiniousMoving: 0,\r\n        playerTurn: state.playerTurn===1?2:1\r\n      };\r\n    }\r\n\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Game from './ai/game';\r\nimport Computer from './ai/computer';\r\nimport Move from './ai/move';\r\n\r\nimport king1 from './img/king1.png';\r\nimport king2 from './img/king2.png';\r\n\r\nimport React, {\r\n  FC,\r\n  memo,\r\n  useReducer,\r\n  //useState,\r\n  useRef,\r\n  useEffect,\r\n  //useLayoutEffect,\r\n  //RefObject,\r\n} from 'react';\r\n\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n  createRecordPlayer,\r\n  AssistantAppState,\r\n  AssistantSmartAppData,\r\n  AssistantCharacterType\r\n} from \"@sberdevices/assistant-client\";\r\n\r\nimport { initialState, reducer } from \"./store\";\r\nimport { background } from '@sberdevices/plasma-tokens';\r\nimport { Row } from '@sberdevices/ui';\r\n\r\nconst dictionary = [\"0vmin\", \"10vmin\", \"20vmin\", \"30vmin\", \"40vmin\", \"50vmin\", \"60vmin\", \"70vmin\", \"80vmin\", \"90vmin\"];\r\nconst label_coords =\r\n  [[0,1,0,2,0,3,0,4],\r\n   [5,0,6,0,7,0,8,0],\r\n   [0,9,0,10,0,11,0,12],\r\n   [13,0,14,0,15,0,16,0],\r\n   [0,17,0,18,0,19,0,20],\r\n   [21,0,22,0,23,0,24,0],\r\n   [0,25,0,26,0,27,0,28],\r\n   [29,0,30,0,31,0,32,0]\r\n  ];\r\n\r\nconst label_coords_backwards =\r\n  [[0,29,0,30,0,31,0,32],\r\n   [25,0,26,0,27,0,28,0],\r\n   [0,21,0,22,0,23,0,24],\r\n   [17,0,18,0,19,0,20,0],\r\n   [0,13,0,14,0,15,0,16],\r\n   [9,0,10,0,11,0,12,0],\r\n   [0,5,0,6,0,7,0,8],\r\n   [1,0,2,0,3,0,4,0]\r\n  ];\r\n\r\nconst initializeAssistant = (getState: any) => {\r\n    console.log('process.env.NODE_ENV=');\r\n    console.log(process.env.NODE_ENV);\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      return createSmartappDebugger({\r\n        token: process.env.REACT_APP_TOKEN ?? \"\",\r\n        initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\r\n        getState,\r\n      });\r\n    }\r\n  \r\n    return createAssistant({ getState });\r\n};\r\n  \r\n\r\n\r\nexport const App: FC = memo(() => {\r\n  const [appState, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const assistantStateRef = useRef<AssistantAppState>();\r\n  const assistantRef = useRef<ReturnType<typeof createAssistant>>();\r\n\r\n  // TODO assistant.Close\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    //dispatch({type: 'init'});\r\n\r\n    assistantRef.current = initializeAssistant(() => assistantStateRef.current);\r\n\r\n    //assistantRef.current.on(\"start\", () => {\r\n    //  alert(\"Start!\");\r\n    //});\r\n\r\n    assistantRef.current.on(\"data\", ({ type, character, navigation, action, insets, command }: any) => {\r\n      // Из-за того, что React.Strict несмотря на то, что вызов я делаю 1 раз, dispatch срабатывае дважды\r\n      // поэтому сделаем счетчик\r\n      // AssistantCharacterCommand\r\n      if (character)\r\n      {\r\n        // TODO брать respectfulAppeal из character\r\n        // 'sber' | 'eva' | 'joy';\r\n        //setAppState({...appState, character: character.id, respectfulAppeal: character.id!=='joy'});\r\n        dispatch({type: 'character', character_id: character.id});\r\n      }\r\n      // AssistantServerAction\r\n      if (action) {\r\n        dispatch(action);\r\n      }\r\n      // AssistantInsetsCommand - команда, которая сообщает смартапу о том, что поверх него будет отображен нативный UI и его размеры.\r\n      if (insets)\r\n      {\r\n        //alert(\"left=\"+insets.left+\", top=\"+insets.top+\", right=\"+insets.right+\", bottom=\"+insets.bottom);\r\n      }\r\n      if (navigation) {\r\n        switch(navigation.command) {\r\n            case 'UP':\r\n              dispatch({type: 'arrow_up'});\r\n              break;\r\n            case 'DOWN':\r\n              dispatch({type: 'arrow_down'});\r\n              break;\r\n            case 'LEFT':\r\n              dispatch({type: 'arrow_left'});\r\n              break;\r\n            case 'RIGHT':\r\n              dispatch({type: 'arrow_right'});\r\n              break;\r\n            case 'FORWARD':\r\n              dispatch({type: 'arrow_ok'});\r\n              break;\r\n        }\r\n    }      \r\n      if (type==='close_app')\r\n      {\r\n        assistantRef?.current?.close();\r\n      }\r\n    });\r\n\r\n\r\n\r\n  }, []);\r\n  \r\n\r\n  function downHandler(e: KeyboardEvent ) {\r\n    if (e.key==='ArrowDown')\r\n    {\r\n      e.preventDefault();\r\n      dispatch({type: 'arrow_down'});\r\n    }\r\n    if (e.key==='ArrowUp')\r\n    {\r\n      e.preventDefault();\r\n      dispatch({type: 'arrow_up'});\r\n    }\r\n    if (e.key==='ArrowLeft')\r\n    {\r\n      e.preventDefault();\r\n      dispatch({type: 'arrow_left'});\r\n    }\r\n    if (e.key==='ArrowRight')\r\n    {\r\n      e.preventDefault();\r\n      dispatch({type: 'arrow_right'});\r\n    }\r\n    if (e.key==='Enter')\r\n    {\r\n      e.preventDefault();\r\n      dispatch({type: 'arrow_ok'});\r\n    }\r\n  }\r\n\r\n  function upHandler(e: KeyboardEvent ) {\r\n  }\r\n  \r\n\r\n  function processContinueMove()\r\n  {\r\n    dispatch({type: 'continue_move_by_robot'});\r\n  }\r\n\r\n  function processRobotMove()\r\n  {\r\n    dispatch({type: 'move_robot'});\r\n  }\r\n  \r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Обрабатываем изменения счетчика ходов, а также смены игрока\r\n    // если ход робота\r\n    if (appState.players[appState.playerTurn-1].isRobot)\r\n    {\r\n      // если продолжение, то ждем 3 секунды и двигаем дальше\r\n      if (appState.isContiniousMoving!==0)\r\n      {\r\n        setTimeout(() => processContinueMove(), 3100);\r\n      } else {\r\n        // надо сделать обычный ход\r\n        //dispatch({type: 'move_robot'});\r\n        // однако надо начать думать над ходом не раньше, чем доска отрисуется (0.2сек)\r\n        setTimeout(() => processRobotMove(), 410);\r\n\r\n      }\r\n    } else {\r\n      // играет человек\r\n    }\r\n  }, [appState.isContiniousMoving, appState.playerTurn, appState.players]);\r\n\r\n\r\n  function changePlayerTurn() {\r\n    /*\r\n    if (this.playerTurn == 1) {\r\n      this.playerTurn = 2;\r\n      $('.turn').css(\"background\", \"linear-gradient(to right, transparent 50%, #BEEE62 50%)\");\r\n    } else {\r\n      this.playerTurn = 1;\r\n      $('.turn').css(\"background\", \"linear-gradient(to right, #BEEE62 50%, transparent 50%)\");\r\n    }\r\n    this.check_if_jump_exist()\r\n    return;\r\n    */\r\n  }\r\n\r\n  function handleTileClick(row: any, column: any, e:any) {\r\n    e.preventDefault();\r\n    dispatch({type: 'tile_click', row: row, column: column});\r\n  }\r\n  \r\n\r\nfunction _renderTiles()\r\n{\r\n  let values = [];\r\n\r\n  let countTiles=0;\r\n\r\n  for (let row=0; row<appState.gameBoard.length; row++) { //row is the index\r\n    for (let column=0; column<appState.gameBoard[row].length; column++) { //column is the index\r\n      //whole set of if statements control where the tiles and pieces should be placed on the board\r\n      if (row % 2 === 1) {\r\n        if (column % 2 === 0) {\r\n\r\n          const divStyle = {\r\n            top: appState.backwardDirection?dictionary[7-row]:dictionary[row],\r\n            left: appState.backwardDirection?dictionary[7-column]:dictionary[column],\r\n            color: \"#FF3333\"\r\n          };          \r\n      \r\n          values.push(<div key={countTiles.toString()} className=\"tile\" id={\"tile\"+countTiles.toString()} style={divStyle} onClick={(e)=>handleTileClick(row, column, e)}>{(appState.backwardDirection?(label_coords_backwards[7-row][7-column]):label_coords[row][column]).toString()}</div>);\r\n          countTiles++;\r\n\r\n        }\r\n      } else {\r\n        if (column % 2 === 1) {\r\n          //countTiles = this.tileRender(row, column, countTiles)\r\n          const divStyle = {\r\n            top: appState.backwardDirection?dictionary[7-row]:dictionary[row],\r\n            left: appState.backwardDirection?dictionary[7-column]:dictionary[column],\r\n            color: \"#FF3333\"\r\n          };          \r\n      \r\n          values.push(<div key={countTiles.toString()} className=\"tile\" id={\"tile\"+countTiles.toString()} style={divStyle} onClick={(e)=>handleTileClick(row, column, e)}>{(appState.backwardDirection?(label_coords_backwards[7-row][7-column]):label_coords[row][column]).toString()}</div>);\r\n          countTiles++;\r\n\r\n        }\r\n      }\r\n      /*\r\n      if (this.board[row][column] == 1) {\r\n        countPieces = this.playerPiecesRender(1, row, column, countPieces)\r\n      } else if (this.board[row][column] == 2) {\r\n        countPieces = this.playerPiecesRender(2, row, column, countPieces)\r\n      }\r\n      */\r\n    }\r\n  }\r\n\r\n  return  values;\r\n}\r\n\r\n\r\nfunction handlePieceClick(row: any, column: any, e:any) {\r\n  e.preventDefault();\r\n  dispatch({type: 'piece_click', row: row, column: column});\r\n}\r\n\r\n\r\nfunction _renderPieces(playerId: number)\r\n{\r\n  let values = [];\r\n  let keys = [];\r\n  let values_sorted = [];\r\n\r\n  let countPieces=0;\r\n\r\n  for (let row=0; row<appState.gameBoard.length; row++) { //row is the index\r\n    for (let column=0; column<appState.gameBoard[row].length; column++) { //column is the index\r\n      let checker=appState.gameBoard[row][column];\r\n      let checkersType=checker%10;\r\n      // 1, 3 - первый игрок, 2, 4 - второй\r\n      if (checkersType === playerId || checkersType === playerId+2) {\r\n        // TODO\r\n        // this.element.css(\"backgroundImage\", \"url('img/king\" + this.player + \".png')\");\r\n\r\n        const divStyle = checkersType===3?{\r\n          top: dictionary[row],\r\n          left: dictionary[column],\r\n          backgroundImage: \"url(\" + king1 + \")\"\r\n        }:checkersType===4?{\r\n          top: dictionary[row],\r\n          left: dictionary[column],\r\n          backgroundImage: \"url(\" + king2 + \")\"\r\n        }: {\r\n          top: dictionary[row],\r\n          left: dictionary[column]\r\n        };\r\n\r\n        let myClassName=appState.hasSelectedItem&&appState.selectedItemRow===row&&appState.selectedItemCol===column?\"piece selected\":\"piece\";\r\n      \r\n        values.push(<div key={Math.floor(checker/10).toString()} className={myClassName} id={\"piece\"+Math.floor(checker/10).toString()} style={divStyle} onClick={(e)=>handlePieceClick(row,column,e)}></div>);\r\n        // чтобы порядок не менялся при перемещении шашек в другие точки\r\n        // (иначе не будет плавной анимации, в случае, когда меняется порядок (даже при неизменных id))\r\n        keys.push({checker:checker, idx: countPieces});\r\n        countPieces++;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  keys.sort((a,b)=>a.checker-b.checker);\r\n\r\n  for (let i = 0; i < keys.length; i++) {  \r\n    values_sorted.push(values[keys[i].idx]);\r\n  }\r\n\r\n  return values_sorted;\r\n}\r\n\r\nfunction handleClearGameClick(e: any) {\r\n  e.preventDefault();\r\n  dispatch({type: 'move_robot'});\r\n}\r\n\r\nfunction handleKeyDown(e:any)\r\n{\r\n  console.debug(\"key\");\r\n}\r\n\r\nfunction _renderPult()\r\n{\r\n  let values=[];\r\n\r\n  if (appState.hasArrowSelectedItem)\r\n  {\r\n    /*\r\n    const divStyle = {\r\n      top: appState.backwardDirection?dictionary[7-appState.arrowSelectedItemRow]:dictionary[appState.arrowSelectedItemRow],\r\n      left: appState.backwardDirection?dictionary[7-appState.arrowSelectedItemCol]:dictionary[appState.arrowSelectedItemCol]\r\n    };\r\n    */          \r\n    const divStyle = {\r\n      top: dictionary[appState.arrowSelectedItemRow],\r\n      left: dictionary[appState.arrowSelectedItemCol]\r\n    };\r\n\r\n\r\n    values.push(<div className=\"selection\" style={divStyle}></div>);\r\n  }\r\n\r\n  return values;\r\n\r\n}\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <div className=\"column\">\r\n    <div className=\"info\">\r\n      <h1>Checkers</h1>\r\n      <hr/>\r\n      <p>Made by codethejason for <a href=\"http://fossasia.org\">FOSSASIA</a> 2015.</p>\r\n    </div>\r\n    <div className=\"stats\">\r\n      <h2>Game Statistics</h2>\r\n      <div className=\"wrapper\">\r\n      <div id=\"player1\">\r\n        <h3>Player 1 (Top)</h3>\r\n      </div>\r\n      <div id=\"player2\">\r\n        <h3>Player 2 (Bottom)</h3>\r\n      </div>\r\n      </div>\r\n      <div className=\"clearfix\"></div>\r\n      <div className=\"turn\" style={appState.playerTurn===1?{background: \"linear-gradient(to right, #BEEE62 50%, transparent 50%)\"}:{background: \"linear-gradient(to right, transparent 50%, #BEEE62 50%)\"}}></div>\r\n      <span id=\"winner\"></span>\r\n      <button id=\"cleargame\" onClick={handleClearGameClick}>Reset Game</button>\r\n    </div>\r\n  </div>\r\n\r\n    <div className=\"column\">\r\n    <div id=\"board\" onKeyDown={(e)=>handleKeyDown(e)}>\r\n      <div className=\"tiles\">\r\n      {_renderTiles()}\r\n      </div>\r\n      <div className=\"pieces\">\r\n        <div className=\"player1pieces\">\r\n        {_renderPieces(1)}\r\n        </div>\r\n        <div className=\"player2pieces\">\r\n        {_renderPieces(2)}\r\n        </div>\r\n      </div>\r\n      <div className=\"pult\">\r\n        {_renderPult()}\r\n      </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  );\r\n\r\n\r\n    /*\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n    */\r\n});","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}